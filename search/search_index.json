{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Author: Shruti Ramkumar Advisor: Tyson Lee Swetnam About \u00b6 Shruti Ramkumar is a rising senior at Hamilton High School and is taking part in The University of Arizona's BIO5 Institute KEYS 2021 summer research internship . She is working in Dr. Tyson L. Swetnam's lab, also part of the National Science Foundation's premiere research cyberinfrastructure CyVerse which is hosted at The University of Arizona. This website follows the FAIR and CARE data principles and hopes to help further open science.","title":"Introduction"},{"location":"#introduction","text":"Author: Shruti Ramkumar Advisor: Tyson Lee Swetnam","title":"Introduction"},{"location":"#about","text":"Shruti Ramkumar is a rising senior at Hamilton High School and is taking part in The University of Arizona's BIO5 Institute KEYS 2021 summer research internship . She is working in Dr. Tyson L. Swetnam's lab, also part of the National Science Foundation's premiere research cyberinfrastructure CyVerse which is hosted at The University of Arizona. This website follows the FAIR and CARE data principles and hopes to help further open science.","title":"About"},{"location":"cyverse/","text":"CyVerse \u00b6 Introduction \u00b6 CyVerse serves as a way for life scientists to share their data with others around the world through a common cyberinfrastructure. It is funded by the National Science Foudation's Directorate for Biological Science and is currently led by the University of Arizona. CyVerse's cyberinfrastructure allows scientists to store their data as well as share it with others through cloud computing for further analysis. Acting as a way to complete complex analyses and share large datasets, CyVerse furthers open science and enables a collaborative workspace. VICE Apps \u00b6 The Visual and Interactive Computing Environment(VICE) allows scientists to run interactive applications through CyVerse. Through this scientists can open their interactive applications(Jupyter Lab, RStudio, Shiny, WebGL, HTML5, VNC, and XPRA), transfer data into containters, analyze this data, and send their results to the cloud.","title":"CyVerse"},{"location":"cyverse/#cyverse","text":"","title":"CyVerse"},{"location":"cyverse/#introduction","text":"CyVerse serves as a way for life scientists to share their data with others around the world through a common cyberinfrastructure. It is funded by the National Science Foudation's Directorate for Biological Science and is currently led by the University of Arizona. CyVerse's cyberinfrastructure allows scientists to store their data as well as share it with others through cloud computing for further analysis. Acting as a way to complete complex analyses and share large datasets, CyVerse furthers open science and enables a collaborative workspace.","title":"Introduction"},{"location":"cyverse/#vice-apps","text":"The Visual and Interactive Computing Environment(VICE) allows scientists to run interactive applications through CyVerse. Through this scientists can open their interactive applications(Jupyter Lab, RStudio, Shiny, WebGL, HTML5, VNC, and XPRA), transfer data into containters, analyze this data, and send their results to the cloud.","title":"VICE Apps"},{"location":"data/","text":"Data \u00b6 The data that will be used during this internship will come from the penguins dataset .","title":"Data"},{"location":"data/#data","text":"The data that will be used during this internship will come from the penguins dataset .","title":"Data"},{"location":"docker/","text":"Introduction \u00b6 Docker allows it's users to create containers and run an application such as RStudio or Jupyter Notebooks in this environment. This open platform is an easy way to quickly write code and then run it. It allows researchers to run whatever they want in the container without having to download the application itself on the host. Containers can be shared so that everyone can have the same copy of the container. Docker can be used to push researchers' applications into a test environment where they can run automated/manual tests. Key Vocabulary \u00b6 Images \u00b6 Images are used to create Docker containers. These are typically created in GitHub using the file name .gitpod.Dockerfile. The Dockerfile outlines the steps needed to create the image and then run it as well. When more instructions are added to the Dockerfile this creates layers in the image. If more instructions are added to the Dockerfile, when it is rebuilt only the layers which are changed are rebuilt. This is one of the reasons why images are lightweight, fast, and small when compared to other virtualization technologies. Figure credit : Chen 2020 described in Medium basic concept of Docker Containers \u00b6 A container is considered as a package that stores all the libraries, files, and binaries necessary to run an application. Using containers software can be moved from different environments and still run reliably. A container is typically only around 10 megabytes in size meaning that a host could run more than one container whereas they only be able to run one virtual machine. Containers can run across all systems(Windows, Mac, and Linux) making them easily accessible. Figure credit : Shruti Ramkumar 2021 Figure credit : Docker","title":"Docker"},{"location":"docker/#introduction","text":"Docker allows it's users to create containers and run an application such as RStudio or Jupyter Notebooks in this environment. This open platform is an easy way to quickly write code and then run it. It allows researchers to run whatever they want in the container without having to download the application itself on the host. Containers can be shared so that everyone can have the same copy of the container. Docker can be used to push researchers' applications into a test environment where they can run automated/manual tests.","title":"Introduction"},{"location":"docker/#key-vocabulary","text":"","title":"Key Vocabulary"},{"location":"docker/#images","text":"Images are used to create Docker containers. These are typically created in GitHub using the file name .gitpod.Dockerfile. The Dockerfile outlines the steps needed to create the image and then run it as well. When more instructions are added to the Dockerfile this creates layers in the image. If more instructions are added to the Dockerfile, when it is rebuilt only the layers which are changed are rebuilt. This is one of the reasons why images are lightweight, fast, and small when compared to other virtualization technologies. Figure credit : Chen 2020 described in Medium basic concept of Docker","title":"Images"},{"location":"docker/#containers","text":"A container is considered as a package that stores all the libraries, files, and binaries necessary to run an application. Using containers software can be moved from different environments and still run reliably. A container is typically only around 10 megabytes in size meaning that a host could run more than one container whereas they only be able to run one virtual machine. Containers can run across all systems(Windows, Mac, and Linux) making them easily accessible. Figure credit : Shruti Ramkumar 2021 Figure credit : Docker","title":"Containers"},{"location":"githubactions/","text":"Introduction \u00b6 GitHub Actions allows for the automation of tasks within your software development life cycle. Through GitHub actions users can automatically run their software testing scripts. Key Vocabulary \u00b6 Workflows \u00b6 Workflows can be used to design, test, package, release, or deploy a project on GitHub. A workflow can be added to a repository in GitHub using the file name .github/workflows. Workflows consist of one or more jobs that are scheduled/triggered by an event. Events \u00b6 Events are the activities that trigger the start of a workflow. Workflows can be triggered using pus or pull requests. Runners \u00b6 Runners can be hosted by GitHub or own on your own and is basically considered as a server that has GitHub Actions runner application installed. A runner runs one job at a time and reports the progress to GitHub. Jobs \u00b6 A job is a sequence of instructions that run on the same runner. A workflow containing multiple jobs will perform them in parallel by default. You may also set up a pipeline to conduct jobs in a specific order. Steps \u00b6 A step is a single task that can be used to execute commands in a job. An action or a shell command can be used as a step. Each step of a task runs on the same runner, allowing all of the activities in that job to exchange data. Actions \u00b6 Actions are commands that are used to join steps to create a job. Actions can be created or found on the GitHub community. Figure credit : GitHub Docs The components of GitHub Actions that work together to run jobs","title":"GitHub Actions"},{"location":"githubactions/#introduction","text":"GitHub Actions allows for the automation of tasks within your software development life cycle. Through GitHub actions users can automatically run their software testing scripts.","title":"Introduction"},{"location":"githubactions/#key-vocabulary","text":"","title":"Key Vocabulary"},{"location":"githubactions/#workflows","text":"Workflows can be used to design, test, package, release, or deploy a project on GitHub. A workflow can be added to a repository in GitHub using the file name .github/workflows. Workflows consist of one or more jobs that are scheduled/triggered by an event.","title":"Workflows"},{"location":"githubactions/#events","text":"Events are the activities that trigger the start of a workflow. Workflows can be triggered using pus or pull requests.","title":"Events"},{"location":"githubactions/#runners","text":"Runners can be hosted by GitHub or own on your own and is basically considered as a server that has GitHub Actions runner application installed. A runner runs one job at a time and reports the progress to GitHub.","title":"Runners"},{"location":"githubactions/#jobs","text":"A job is a sequence of instructions that run on the same runner. A workflow containing multiple jobs will perform them in parallel by default. You may also set up a pipeline to conduct jobs in a specific order.","title":"Jobs"},{"location":"githubactions/#steps","text":"A step is a single task that can be used to execute commands in a job. An action or a shell command can be used as a step. Each step of a task runs on the same runner, allowing all of the activities in that job to exchange data.","title":"Steps"},{"location":"githubactions/#actions","text":"Actions are commands that are used to join steps to create a job. Actions can be created or found on the GitHub community. Figure credit : GitHub Docs The components of GitHub Actions that work together to run jobs","title":"Actions"},{"location":"gitpod/","text":"Gitpod is a fully working environment that can be launched from GitHub. Setting up local dev environments is often very time consuming, but GitPod can do this within a couple of seconds. GitPod includes all the tools and binaries that are available on Linux. During this internship GitPod will be used to help launch RStudio, Jupyter, Java8, and more applications directly from GitHub. Figure credit : GitPod Logo","title":"GitPod"},{"location":"java/","text":"Java will be used in this internship as an application that will be opened using GitPod from a specific repository. Figure credit : Li 2020 described in Medium Java Logo","title":"Java"},{"location":"keysassignments/","text":"Keys Assignments \u00b6 Assignment 1: Introduction to Your Research \u00b6 Purpose of the Research \u00b6 To create a \"Research Object\" where anyone can reproduce their research using a living workflow that includes cyberinfrastructure (hardware, orchestration software), containers (specific research software libraries, algorithms, and code), and data. Previous Research \u00b6 n/a -- this is the bleeding edge! Describe The Need For The Study \u00b6 Figure credit : Peng 2011 described in the journal Science how reproducible research can be accomplished. Doing reproducible research is hard! By providing a templated development environment, using GitHub, GitPod, Docker, and common data science programming languages (R, Python, Java, etc), researchers can use CyVerse to work together more seamlessly and interactively, and students can work asynchronously following easy to follow materials. Problem Statement \u00b6 How can a researcher or a student get started with these platforms and tools if they've never seen or heard of them them before? Solution: Develop my own personal profile on GitHub, and add these resources as repositories where others can clone my templates and do their own research. Helpful Images (Photographs, Tables, Charts, etc) \u00b6 add more here Assignment 2: Materials and Methods \u00b6 Methods \u00b6 Continuous Integration (CI) requires a platform from which to test software. Continuous Delivery (CD) allows software to be released quickly and reliably. These two continous frameworks are frequently used together as 'CI/CD'. I am using GitHub as the resource for hosting the software CyVerse are working on. GitHub provides \"version control\" for the code, in case there are any mistakes, they can be reversed. GitHub also supports \" Actions \" which run software as part of the CI/CD life cycle I am building software containers with Docker and hosting them on the DockerHub registry. A Docker container has its own operating system, and the specific software I want to run. Docker is an easy way to quickly write code and then run it. When run on the cloud, Docker allows researchers to run whatever they want in the container without having to download the application itself on the host. Containers can be shared so that everyone can have the same copy of the container. Docker can be used to push researchers' applications into a test environment where they can run automated/manual tests. During this research project it will be used to push containers and open them in GitPod and on CyVerse. Line 1: This is the name of workflow when the action is running(optional line) Line 3-5: Establishes the event that triggers the workflow Line 6-7: The workflow will automatically build and push every Saturday at 12:00 UTC time Line 9: Groups together all the jobs Line 11-12: Ensures that the job runs on virtual machine hosted by GitHub Line 14: Groups together all the steps. The code under this is usually an action or command Line 16-17: Materials \u00b6 Docker: allows it's users to create containers and run an application such as RStudio Markdown Notebooks or Jupyter Notebooks. DockerHub: a registry of public Docker containers. We will host our public images on DockerHub GitHub Actions: allows for the automation of tasks within your software development life cycle. Through GitHub Actions users can automatically run their software testing scripts. During this intenrship GitHub Actions will be used to push the code from GitHub to DockerHub and open containers such as rstudio-cyverse in Docker. GitPod: GitPod is a fully working environment that can be launched from GitHub. Setting up local dev environments is often very time consuming, but GitPod can do this within a couple of seconds. GitPod includes all the tools and binaries that are available on Linux. During this internship GitPod will be used to help launch RStudio, Jupyter, Java8, and more applications directly from GitHub. Scientific Programming languages: Python, R, Java. Will be used in this internship as an application that will be opened using GitPod from a specific repository. GitHub: Will be used to store repository and code. Assignment 3: Results \u00b6 All four versions of RStudio pushed to DockerHub Successful build and push of three versions of JupyterLab using GitHub Actions All three tagged versions of JupyterLab pushed to Docker using one .yml file Assignment 4: Conclusion \u00b6 The goal of this project was accomplished. The goal of this project was to create a GitHub account and create repositories within that GitHub account to help scientists do reproducible research online without having much knowledge about platforms such as GitHub, Docker, etc. To accomplish this goal two different repositories were created. The first repository created pushed a container containing RStudio to DockerHub. I was able to code the .yml file so that four different versions of RStudio were pushed to DockerHub. This was done because some old code can only be viewed on older versions of RStudio while some new code can only be seen on newer versions of DockerHub. The second repository created pushed a container containing three different versions of JuptyerLab to DockerHub for the same reasons stated above. Scientists who now want to launch containers can click on my profile, clone the repository, and launch the containers. These containers allow scientists to save, track, and share their work thus complying with reproducible science and aiding in the current crisis. It also enable scientists to be able to launch containers without having much knowledge or installing RStudio or JupyterLab on the host. Assignment 5: Short Abstract \u00b6 As the world shifts to using cloud computing technology its important data scientists begin to adopt techniques which enable reproducible results. The purpose of this project was to create living workflows often called 'continuous integration and continuous development' or CI/CD, using code version control systems, and containerized software. These tools all help data scientists in recording and sharing their research objects. Code repositories were created in GitHub which used continuous 'actions' which pushed pre-compiled software containers to a public container registry (the DockerHub) as well as a private registry. The containers included Linux operating systems and widely used research software languages R and Python as well as their graphic user interfaces (GUI) integrated development environments (IDE): RStudio and JupyterLab, respectively.","title":"Assignments"},{"location":"keysassignments/#keys-assignments","text":"","title":"Keys Assignments"},{"location":"keysassignments/#assignment-1-introduction-to-your-research","text":"","title":"Assignment 1: Introduction to Your Research"},{"location":"keysassignments/#purpose-of-the-research","text":"To create a \"Research Object\" where anyone can reproduce their research using a living workflow that includes cyberinfrastructure (hardware, orchestration software), containers (specific research software libraries, algorithms, and code), and data.","title":"Purpose of the Research"},{"location":"keysassignments/#previous-research","text":"n/a -- this is the bleeding edge!","title":"Previous Research"},{"location":"keysassignments/#describe-the-need-for-the-study","text":"Figure credit : Peng 2011 described in the journal Science how reproducible research can be accomplished. Doing reproducible research is hard! By providing a templated development environment, using GitHub, GitPod, Docker, and common data science programming languages (R, Python, Java, etc), researchers can use CyVerse to work together more seamlessly and interactively, and students can work asynchronously following easy to follow materials.","title":"Describe The Need For The Study"},{"location":"keysassignments/#problem-statement","text":"How can a researcher or a student get started with these platforms and tools if they've never seen or heard of them them before? Solution: Develop my own personal profile on GitHub, and add these resources as repositories where others can clone my templates and do their own research.","title":"Problem Statement"},{"location":"keysassignments/#helpful-images-photographs-tables-charts-etc","text":"add more here","title":"Helpful Images (Photographs, Tables, Charts, etc)"},{"location":"keysassignments/#assignment-2-materials-and-methods","text":"","title":"Assignment 2: Materials and Methods"},{"location":"keysassignments/#methods","text":"Continuous Integration (CI) requires a platform from which to test software. Continuous Delivery (CD) allows software to be released quickly and reliably. These two continous frameworks are frequently used together as 'CI/CD'. I am using GitHub as the resource for hosting the software CyVerse are working on. GitHub provides \"version control\" for the code, in case there are any mistakes, they can be reversed. GitHub also supports \" Actions \" which run software as part of the CI/CD life cycle I am building software containers with Docker and hosting them on the DockerHub registry. A Docker container has its own operating system, and the specific software I want to run. Docker is an easy way to quickly write code and then run it. When run on the cloud, Docker allows researchers to run whatever they want in the container without having to download the application itself on the host. Containers can be shared so that everyone can have the same copy of the container. Docker can be used to push researchers' applications into a test environment where they can run automated/manual tests. During this research project it will be used to push containers and open them in GitPod and on CyVerse. Line 1: This is the name of workflow when the action is running(optional line) Line 3-5: Establishes the event that triggers the workflow Line 6-7: The workflow will automatically build and push every Saturday at 12:00 UTC time Line 9: Groups together all the jobs Line 11-12: Ensures that the job runs on virtual machine hosted by GitHub Line 14: Groups together all the steps. The code under this is usually an action or command Line 16-17:","title":"Methods"},{"location":"keysassignments/#materials","text":"Docker: allows it's users to create containers and run an application such as RStudio Markdown Notebooks or Jupyter Notebooks. DockerHub: a registry of public Docker containers. We will host our public images on DockerHub GitHub Actions: allows for the automation of tasks within your software development life cycle. Through GitHub Actions users can automatically run their software testing scripts. During this intenrship GitHub Actions will be used to push the code from GitHub to DockerHub and open containers such as rstudio-cyverse in Docker. GitPod: GitPod is a fully working environment that can be launched from GitHub. Setting up local dev environments is often very time consuming, but GitPod can do this within a couple of seconds. GitPod includes all the tools and binaries that are available on Linux. During this internship GitPod will be used to help launch RStudio, Jupyter, Java8, and more applications directly from GitHub. Scientific Programming languages: Python, R, Java. Will be used in this internship as an application that will be opened using GitPod from a specific repository. GitHub: Will be used to store repository and code.","title":"Materials"},{"location":"keysassignments/#assignment-3-results","text":"All four versions of RStudio pushed to DockerHub Successful build and push of three versions of JupyterLab using GitHub Actions All three tagged versions of JupyterLab pushed to Docker using one .yml file","title":"Assignment 3: Results"},{"location":"keysassignments/#assignment-4-conclusion","text":"The goal of this project was accomplished. The goal of this project was to create a GitHub account and create repositories within that GitHub account to help scientists do reproducible research online without having much knowledge about platforms such as GitHub, Docker, etc. To accomplish this goal two different repositories were created. The first repository created pushed a container containing RStudio to DockerHub. I was able to code the .yml file so that four different versions of RStudio were pushed to DockerHub. This was done because some old code can only be viewed on older versions of RStudio while some new code can only be seen on newer versions of DockerHub. The second repository created pushed a container containing three different versions of JuptyerLab to DockerHub for the same reasons stated above. Scientists who now want to launch containers can click on my profile, clone the repository, and launch the containers. These containers allow scientists to save, track, and share their work thus complying with reproducible science and aiding in the current crisis. It also enable scientists to be able to launch containers without having much knowledge or installing RStudio or JupyterLab on the host.","title":"Assignment 4: Conclusion"},{"location":"keysassignments/#assignment-5-short-abstract","text":"As the world shifts to using cloud computing technology its important data scientists begin to adopt techniques which enable reproducible results. The purpose of this project was to create living workflows often called 'continuous integration and continuous development' or CI/CD, using code version control systems, and containerized software. These tools all help data scientists in recording and sharing their research objects. Code repositories were created in GitHub which used continuous 'actions' which pushed pre-compiled software containers to a public container registry (the DockerHub) as well as a private registry. The containers included Linux operating systems and widely used research software languages R and Python as well as their graphic user interfaces (GUI) integrated development environments (IDE): RStudio and JupyterLab, respectively.","title":"Assignment 5: Short Abstract"},{"location":"logbook/","text":"Logbook \u00b6 Day 1 (6/14) : Completed the Python tutorial using carpentries . Learned how to create/utilize variables, process tabular data files, visualize tabular data files, store values in lists, repeat actions using loops, analyze data from multiple files, and debug programs. Day 2 (6/15) : Completed the Version Control with Git tutorials using carpentries . Learned how to create a repository in Git, record changes in Git, read tabular data, modify and commit files, utilize the HEAD and CAT commands, and push/pull/clone a remote repository. Day 3 (6/16) : Completed the Unix tutorial using carpentries . Learned how to create files and directories, navigate files and directories, construct command pipelines, process files, write loops and shell sripts, and utilize the commands grep and find. Day 4 (6/17) : Read \"The iPlant Collaborative: Cyberinfrastructure for Enabling Data to Discovery for the Life Sciences\" and \"Ten Simple Rules to Cultivate Transdisciplinary Collaboration in Data Science\" . Learned about the origins of CyVerse and how it was initially used to support life science communities in their search for a proper tool for data management. Understood the importance of following ten simple rules to help with furthering the culture of collaboration. Day 5 (6/18) : Met with Dr.Swetnam and discussed my tasks for the day.Created this website in order to track progress during KEYS and comply with reproducible science. Added hyperlinks to the introduction page and logbook, created each of the pages using GitHub, and added descriptions to the introduction and logbook pages. Day 6 (6/21) : Added descriptions and hyperlinks to the CyVerse, R, and Python pages. Completed my logbook with more detail. Learned how to launch GitPod and then opened a Jupyter Notebook using GitPod. Launching GitPod for the first time! Launching Jupyter Notebook using GitPod Day 7(6/22) : With the help of Dr.Swetnam learned how to access Docker from GitPod and run GodLoveD/lolcow container using Docker. Output from my first container on GitPod Manipulating the various entry points of the container using GitPod Day 8(6/23) : Attended the KEYS Science Literacy Seminar in the morning where the deans of several of the colleges at the University of Arizona talked. During the seminar also discussed the need to present our projects in layman terms so that the average person can understand what is happening. In the afternoon met with Dr.Swetnam and discussed the tasks for the upcoming two days. Tried to build container using GodLoveD/lolcow as an example, but came across this error. Error while attempting to build and push first container Day 9(6/24) Attempted to launch Rstudio using the GitPod extension, but was unable to due to errors. Researched about these errors on the GitPod community, but was not able to find any solutions. Used KasperBrink's GitHub repository as an outline for this attempt. Created pages on the website for Docker, GitPod, GitHub Actions, and Java. Added information + pictures to the Docker page. Error while attempting to launch RStudio using GitPod Day 10(6/25) Added descriptions and pictures to the GitPod, GitHub Actions, and Java pages. With the help of Dr.Swetnam was able to build and push first container to DockerHub. Pushing first container to DockerHub Day 11(6/28) Added the materials and methods page to the website and added descriptions to these pages. Tried to push container from GitHub to DockerHub. Faced several problems along the way two of the problems are shown below. Error while pushing container to DockerHub/ Solved the error by creating an access token through DockerHub Error while attempting to build the container Day 12(6/29) Met with Dr.Swetnam and he recommended I try creating a seperate repository to try and push a container to DockerHub to see if that works first before attempting this with the rstudio-verse repository. Created a seperate repository using a tutorial and was able to push my first container from GitHub to Docker using GitHub Actions. Hope to replicate this in the upcoming days for the rstudio-verse repository. First checkmark in GitHub Actions indicating my container was pushed to DockerHub!! Took probably over 25-30 tries Container appearing in DockerHub after it was pushed from GitHub using GitHub Actions Day 14(7/6) Opened new project in RStudio and played around with the dataset PalmerPenguins . Followed the instructions to explore the dataset on this website Had trouble at first installing package in the RStudio library. Solved the problem with the help of Dr. Swetnam and this article Error when trying to install palmer penguins package in RStudio Palmer Peguins package was successfully installed Day 15(7/7) Tried to push rstudio-verse container to Docker using GitHub Actions. Faced several problems along the way. One being that during the build and push stage GitHub was unable to locate the Dockerfile since there were no Dockerfiles in the root of the rstudio-verse folder. To solve this problem created a path and identified where the Dockerfile was. Took about 50+ tries to do this. Then faced another problem when GitHub was installing the rockerverse container because the code exited at step 14/26. During Build and Push unable to locate Dockerfile Day 16(\u215e) The most successful day of this internship!! Launched RStudio-verse:latest container to DockerHub. Proceeded to use GitHub Actions and launched the rest of the versions of rstudio-verse to DockerHub. Still facing problems with one of the versions of RStudio-verse(3.6.3). Think the problem might be in the Dockerfile and not the .yml file because the code exits at a certain step in the Dockerfile. Was also able to launch all three versions of JuptyerLab to Docker using GitHub Actions under one .yml file. All four versions of RStudio pushed to DockerHub Successful build and push of three versions of JupyterLab using GitHub Actions All three tagged versions of JupyterLab pushed to Docker using one .yml file Day 17(7/9) Read this page and learned how to schedule automatic workflow builds. Tested this by setting a time on Friday and seeing if it worked. It worked. Then scheduled the actual automatic build to take place every Saturday at 12:00 UTC time. Code to schedule automatic workflow build Day 18(7/12) Scheduled builds failed over the weekend so attempted to fix those. Started and finshed the conclusion and discussion of results assignment Day 19(7/13) Started to work on poster and presentation. Added problem, solution, and materials to both poster and presentation. Created graphic for methods on biorender. Day 20(7/14) Finalized poster and presentation before sending to Dr.Swetnam for feedback. Received feedback and changed the poster and presentation accordingly. Wrote short abstract and received feedback from Dr. Swetnam.","title":"Logbook"},{"location":"logbook/#logbook","text":"Day 1 (6/14) : Completed the Python tutorial using carpentries . Learned how to create/utilize variables, process tabular data files, visualize tabular data files, store values in lists, repeat actions using loops, analyze data from multiple files, and debug programs. Day 2 (6/15) : Completed the Version Control with Git tutorials using carpentries . Learned how to create a repository in Git, record changes in Git, read tabular data, modify and commit files, utilize the HEAD and CAT commands, and push/pull/clone a remote repository. Day 3 (6/16) : Completed the Unix tutorial using carpentries . Learned how to create files and directories, navigate files and directories, construct command pipelines, process files, write loops and shell sripts, and utilize the commands grep and find. Day 4 (6/17) : Read \"The iPlant Collaborative: Cyberinfrastructure for Enabling Data to Discovery for the Life Sciences\" and \"Ten Simple Rules to Cultivate Transdisciplinary Collaboration in Data Science\" . Learned about the origins of CyVerse and how it was initially used to support life science communities in their search for a proper tool for data management. Understood the importance of following ten simple rules to help with furthering the culture of collaboration. Day 5 (6/18) : Met with Dr.Swetnam and discussed my tasks for the day.Created this website in order to track progress during KEYS and comply with reproducible science. Added hyperlinks to the introduction page and logbook, created each of the pages using GitHub, and added descriptions to the introduction and logbook pages. Day 6 (6/21) : Added descriptions and hyperlinks to the CyVerse, R, and Python pages. Completed my logbook with more detail. Learned how to launch GitPod and then opened a Jupyter Notebook using GitPod. Launching GitPod for the first time! Launching Jupyter Notebook using GitPod Day 7(6/22) : With the help of Dr.Swetnam learned how to access Docker from GitPod and run GodLoveD/lolcow container using Docker. Output from my first container on GitPod Manipulating the various entry points of the container using GitPod Day 8(6/23) : Attended the KEYS Science Literacy Seminar in the morning where the deans of several of the colleges at the University of Arizona talked. During the seminar also discussed the need to present our projects in layman terms so that the average person can understand what is happening. In the afternoon met with Dr.Swetnam and discussed the tasks for the upcoming two days. Tried to build container using GodLoveD/lolcow as an example, but came across this error. Error while attempting to build and push first container Day 9(6/24) Attempted to launch Rstudio using the GitPod extension, but was unable to due to errors. Researched about these errors on the GitPod community, but was not able to find any solutions. Used KasperBrink's GitHub repository as an outline for this attempt. Created pages on the website for Docker, GitPod, GitHub Actions, and Java. Added information + pictures to the Docker page. Error while attempting to launch RStudio using GitPod Day 10(6/25) Added descriptions and pictures to the GitPod, GitHub Actions, and Java pages. With the help of Dr.Swetnam was able to build and push first container to DockerHub. Pushing first container to DockerHub Day 11(6/28) Added the materials and methods page to the website and added descriptions to these pages. Tried to push container from GitHub to DockerHub. Faced several problems along the way two of the problems are shown below. Error while pushing container to DockerHub/ Solved the error by creating an access token through DockerHub Error while attempting to build the container Day 12(6/29) Met with Dr.Swetnam and he recommended I try creating a seperate repository to try and push a container to DockerHub to see if that works first before attempting this with the rstudio-verse repository. Created a seperate repository using a tutorial and was able to push my first container from GitHub to Docker using GitHub Actions. Hope to replicate this in the upcoming days for the rstudio-verse repository. First checkmark in GitHub Actions indicating my container was pushed to DockerHub!! Took probably over 25-30 tries Container appearing in DockerHub after it was pushed from GitHub using GitHub Actions Day 14(7/6) Opened new project in RStudio and played around with the dataset PalmerPenguins . Followed the instructions to explore the dataset on this website Had trouble at first installing package in the RStudio library. Solved the problem with the help of Dr. Swetnam and this article Error when trying to install palmer penguins package in RStudio Palmer Peguins package was successfully installed Day 15(7/7) Tried to push rstudio-verse container to Docker using GitHub Actions. Faced several problems along the way. One being that during the build and push stage GitHub was unable to locate the Dockerfile since there were no Dockerfiles in the root of the rstudio-verse folder. To solve this problem created a path and identified where the Dockerfile was. Took about 50+ tries to do this. Then faced another problem when GitHub was installing the rockerverse container because the code exited at step 14/26. During Build and Push unable to locate Dockerfile Day 16(\u215e) The most successful day of this internship!! Launched RStudio-verse:latest container to DockerHub. Proceeded to use GitHub Actions and launched the rest of the versions of rstudio-verse to DockerHub. Still facing problems with one of the versions of RStudio-verse(3.6.3). Think the problem might be in the Dockerfile and not the .yml file because the code exits at a certain step in the Dockerfile. Was also able to launch all three versions of JuptyerLab to Docker using GitHub Actions under one .yml file. All four versions of RStudio pushed to DockerHub Successful build and push of three versions of JupyterLab using GitHub Actions All three tagged versions of JupyterLab pushed to Docker using one .yml file Day 17(7/9) Read this page and learned how to schedule automatic workflow builds. Tested this by setting a time on Friday and seeing if it worked. It worked. Then scheduled the actual automatic build to take place every Saturday at 12:00 UTC time. Code to schedule automatic workflow build Day 18(7/12) Scheduled builds failed over the weekend so attempted to fix those. Started and finshed the conclusion and discussion of results assignment Day 19(7/13) Started to work on poster and presentation. Added problem, solution, and materials to both poster and presentation. Created graphic for methods on biorender. Day 20(7/14) Finalized poster and presentation before sending to Dr.Swetnam for feedback. Received feedback and changed the poster and presentation accordingly. Wrote short abstract and received feedback from Dr. Swetnam.","title":"Logbook"},{"location":"python/","text":"Python \u00b6 Throughout this internship Jupyter Notebooks will be used to create interactive visuals to help showcase and explain any code written throughout the internships. Jupyter Notebooks specifically utilize Python and allow users to share their live code along with other aspects like images, tables, graphs, mathematical equations, and interactive controls. These notebooks can be used to help with machine learning, visualizing/cleaning data, numerical stimulation, and more.","title":"Python"},{"location":"python/#python","text":"Throughout this internship Jupyter Notebooks will be used to create interactive visuals to help showcase and explain any code written throughout the internships. Jupyter Notebooks specifically utilize Python and allow users to share their live code along with other aspects like images, tables, graphs, mathematical equations, and interactive controls. These notebooks can be used to help with machine learning, visualizing/cleaning data, numerical stimulation, and more.","title":"Python"},{"location":"r/","text":"R \u00b6 Rstudio is an open source Integrated Development Environment(IDE) for R. R is a programming language that is directed towards graphics and statistics. Using RStudio scientists can easily create graphics based off their data, write scripts, and quickly access files on their computers. Launching RStudio directly from GitHub using GitPod","title":"R"},{"location":"r/#r","text":"Rstudio is an open source Integrated Development Environment(IDE) for R. R is a programming language that is directed towards graphics and statistics. Using RStudio scientists can easily create graphics based off their data, write scripts, and quickly access files on their computers. Launching RStudio directly from GitHub using GitPod","title":"R"}]}